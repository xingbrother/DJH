#pragma once


#ifndef DJH_LIST_H
#define DJH_LIST_H
#define LinkNodePosi(T) ListNode<T>*
#define Rank int
#include <iostream>
using namespace std;
template <typename T>
struct ListNode {
	T data;
	LinkNodePosi(T) pred;
	LinkNodePosi(T) succ;
	ListNode() { pred = nullptr; succ = nullptr; data = 0; }
	ListNode(T e, LinkNodePosi(T) p = nullptr, LinkNodePosi(T) s = nullptr)
		: data(e), pred(p), succ(s) {}
	LinkNodePosi(T) insertAsPred(T const& e);
	LinkNodePosi(T) insertAsSucc(T const& e);

};

template <typename T>
class List {
private:
	int _size;
	LinkNodePosi(T) header;
	LinkNodePosi(T) trailer;
protected:
	void init();//只包含头尾的哨兵
	int  clear();//清除所有结点
	void copyNodes(LinkNodePosi(T) p, int n);//赋值列表中自p起的n项
	void merge(LinkNodePosi(T)&, int, List<T>&, LinkNodePosi(T), int);
	void mergeSort(LinkNodePosi(T)& p, int n);//p-n个结点归并排序
	void selectionSort(LinkNodePosi(T), int);


public:
	void insertionSort(LinkNodePosi(T), int);
	List() { init(); }
	List(List<T> const& L);
	List(List<T> const& L, Rank r, int n);//复制列表中L r-n的项
	List(LinkNodePosi(T) p, int n);//复制列表中自p-n的项
	~List();//释放所有结点
public:

	Rank size() const { return _size; }
	bool empty() { return _size <= 0; }
	T& operator[] (Rank r) const;
	LinkNodePosi(T) first() const { return header->succ; };
	LinkNodePosi(T) last() const { return trailer->pred; }
	bool valid(LinkNodePosi(T) p)
	{   //判断结点p对外是否合法
		return p && (trailer != p) && (header != p);
	}
	int ifdisordered() const;//判断列表是否已排序
	//无序列表的查找,全列表查找
	LinkNodePosi(T) find(T const& e)const {
		return find(e, _size, trailer);// 下接⬇️
	}
	//无序区间查找
	LinkNodePosi(T) find(T const&, int, LinkNodePosi(T))const;
	//有序区间查找，在p的n个前驱中，找到不大于e且秩最大的最后者
	//自左至右查找，并返回p
	LinkNodePosi(T) search(T const& e, int n, LinkNodePosi(T) p)const;
	//找出在p及其n-1个后继中选出最大者，返回由p-n中最大值的结点
	LinkNodePosi(T) selectMax(LinkNodePosi(T) p, int n) const;

	LinkNodePosi(T) selectMax() const {   //整体最大者
		return selectMax(header->succ, _size);
	}

public:
	//可写访问接口


	LinkNodePosi(T) insertAsFirst(T const& e);
	LinkNodePosi(T) insertAsLast(T const& e);
	//将e当作p的后继插入（尾插法）
	LinkNodePosi(T) insertAfter(LinkNodePosi(T) p, T const& e);
	//将e当作p的前驱插入(前插法)，具体的实现已经在结点类里完成，
	//并返回新插入的结点的指针
	LinkNodePosi(T) insertBefore(LinkNodePosi(T) p, T const& e);
	T remove(LinkNodePosi(T) p);//删除合法位置的p结点，返回被删除结点
	void merge(List<T>& L) {
		//全列表归并
		merge(first(), L.size(), L, L.first(), L._size);
	}
	void sort(LinkNodePosi(T) p, int n);//列表区间排序
	void sort() {
		//列表整体排序
		sort(first(), _size);
	}
	int deduplicate();//列表无序去重
	int uniquify();//有序去重
	void reverse();//前后倒置
	void traverse(void (*)(T&));//函数指针
	template <typename VST>
	void traverse(VST&);

};





template <typename T>
void List<T>::insertionSort(ListNode<T>* p, int n) {
	for (int r = 0; r < n; ++r) {
		//search：
		//有序区间查找,在p前面的n个结点查找
		//有序区间查找，在p的n个前驱中，找到不大于e且秩最大的最后者
		//自右至左查找，并返回p
		insertAfter(search(p->data, r, p), p->data);
		p = p->succ;
		remove(p->pred);
	}
}
template <typename T>
//返回由p-n中最大值的结点
ListNode<T>* List<T>::selectMax(ListNode<T>* p, int n)const {
	LinkNodePosi(T) max = p;//暂定p为最大
	//后序结点逐一与max比较
	for (LinkNodePosi(T) cur = p; 1 < n; n--) {
		//若cur >= max就更新max结点
		if ((cur = cur->succ)->data >= max->data) {
			max = cur;
		}
	}
	return max;
}
template <typename T>
void List<T>::selectionSort(ListNode<T>* p, int n) {
	LinkNodePosi(T) head = p->pred;
	LinkNodePosi(T) tail;
	for (int i = 0; i < n; ++i) {
		tail = tail->succ;//迭代找到列表的最后一个结点
	}
	while (1 < n) {
		//remove返回被删除结点的值
		//selectMax 返回由p-n结点中最大值的指针
		insertBefore(tail, remove(selectMax(head->succ, n)));
		tail = tail->pred;
		n--;
	}
}



template <typename T>
int List<T>::deduplicate() {
	if (_size < 2) {
		return 0; //只有一个或0个元素，无重复
	}
	int oldsize = _size;
	LinkNodePosi(T) p = first(); //是首结点，不是头结点
	Rank r = 1;//p从首结点开始
	while (trailer != (p = p->succ)) {
		//在r-p中查找p->data元素，从头往后查找
		LinkNodePosi(T) q = find(p->data, r, p);
		q ? remove(q) : r++;

	}
	return oldsize - _size;

}
template <typename T>
int List<T>::clear() {
	int oldsize = _size;
	while (0 < _size) {
		remove(header->succ);
	}
	return oldsize;
}
template <typename T>
List<T>::~List() {
	clear();
	delete header;
	delete trailer;
}
template<typename T>
T List<T>::remove(ListNode<T>* p) {
	//返回被删除结点的值
	T e = p->data; //备份数据
	p->pred->succ = p->succ;
	p->succ->pred = p->pred;
	delete(p);
	_size--;
	return e;
}

template <typename T>
void List<T>::init() {
	//只包含头尾的哨兵
	header = new ListNode<T>;
	trailer = new ListNode<T>;
	header->succ = trailer;
	header->pred = nullptr;
	trailer->pred = header;
	trailer->succ = nullptr;
	_size = 0;
}

template<typename T>
//有序列表的去重
int List<T>::uniquify() {
	if (_size < 2) {
		return 0;
	}
	int oldsize = _size;
	LinkNodePosi(T) p = first();
	LinkNodePosi(T) q;
	while (trailer != (q = p->succ)) {
		if (p->data != q->data) {
			p = q;//如果相同，抵达了下一个区间的首结点，再用q更新p
		}
		else {
			remove(q);
		}
	}
	return oldsize - _size;
}

template<typename T>
//有序区间查找,在p前面的n个结点查找
//有序区间查找，在p的n个前驱中，找到不大于e且秩最大的最后者
//自右至左查找，并返回p
ListNode<T>* List<T>::search(const T& e, int n, ListNode<T>* p) const {
	while (0 <= n--) {
		if (((p = p->pred)->data) <= e)
			break;
	}
	return p;
}

template <typename T>
T& List<T>::operator[](Rank r) const {
	//LinkNodePosi(T)p=frist();
	LinkNodePosi(T)p = header->succ;
	while (0 < r--)
		p = p->succ;
	return p->data;
}
template <typename T>
LinkNodePosi(T) List<T>::find(const T& e, int n,
	ListNode<T>* p) const {

	while (0 < n--)
		if (e == (p = p->pred)->data)
			return p;
	return nullptr;
}
template <typename T>
ListNode<T>* List<T>::insertAfter(ListNode<T>* p, const T& e) {
	_size++;
	return p->insertAsSucc(e);
}
template<typename T>
ListNode<T>* List<T>::insertBefore(ListNode<T>* p, const T& e) {
	//TODO
	_size++;
	//返回新插入的结点的指针
	return p->insertAsPred(e);
}

template<typename T>
void List<T>::copyNodes(ListNode<T>* p, int n) {
	init();
	while (n--) {
		insertAsLast(p->data);
		p = p->succ;
	}

}
template <typename T>
ListNode<T>* List<T>::insertAsFirst(const T& e) {
	//insertAfter(header,e);
	//TODO 正确性有待验证
	return insertAfter(header, e);
}
template<typename T>
ListNode<T>* List<T>::insertAsLast(const T& e) {
	return insertBefore(trailer, e);

}


template <typename T>
ListNode<T>* ListNode<T>::insertAsSucc(const T& e) {
	//返回新插入结点的指针
	//this~前驱，succ～后继
	LinkNodePosi(T) x = new ListNode(e, this, succ);
	succ->pred = x;
	succ = x;
	return x;
}
template<typename T>
ListNode<T>* ListNode<T>::insertAsPred(const T& e) {
	//返回新插入的结点的指针
	LinkNodePosi(T) x = new ListNode(e, pred, this);
	pred->succ = x;
	pred = x;
	return x;
}

#endif //DJH_LIST_H
